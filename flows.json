[
    {
        "id": "3efdd6c7ec92ccb2",
        "type": "tab",
        "label": "mqtt DB_Protocol",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2fa83399a0b11391",
        "type": "tab",
        "label": "mqtt DB300_Settings",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c57ee5e6df58f697",
        "type": "tab",
        "label": "mqtt DB300_Search",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7db4cad2bb629dbe",
        "type": "tab",
        "label": "serial DB300_Search",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c69d424d21b653c5",
        "type": "tab",
        "label": "serial DB300_Settings",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ba402f83e78daed1",
        "type": "serial-port",
        "name": "",
        "serialport": "COM1",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "8afb059a.9e82f8",
        "type": "mqtt-broker",
        "name": "io.adafruit.com",
        "broker": "io.adafruit.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4fd1d76d70a6b2c0",
        "type": "ui_group",
        "name": "DB_MqttNet",
        "tab": "632e1210202fb461",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "mqttBroker",
        "type": "mqtt-broker",
        "name": "io.adafruit.com",
        "broker": "io.adafruit.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c5388dab43124f68",
        "type": "ui_tab",
        "name": "MQTT",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "632e1210202fb461",
        "type": "ui_tab",
        "name": "Serial",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e434f41b1ee8faf4",
        "type": "ui_group",
        "name": "DB_MqttNet",
        "tab": "c5388dab43124f68",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "370c76cdb65076e4",
        "type": "ui_group",
        "name": "DB_Protocol",
        "tab": "c5388dab43124f68",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "afbc41ebe8b8bf8c",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "3fed98b0ad486157",
        "type": "function",
        "z": "3efdd6c7ec92ccb2",
        "name": "function",
        "func": "let input = msg.payload;\n\n// JSON 형식으로 msg.payload를 변경\nmsg.payload = {\n    \"db_protocol\": input\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 100,
        "wires": [
            [
                "7fc613f9ba9d1862"
            ]
        ]
    },
    {
        "id": "e59cce8271ad4328",
        "type": "ui_text_input",
        "z": "3efdd6c7ec92ccb2",
        "name": "",
        "label": "송신:",
        "tooltip": "![000실시간문구패킷!]",
        "group": "370c76cdb65076e4",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 410,
        "y": 100,
        "wires": [
            [
                "3fed98b0ad486157"
            ]
        ]
    },
    {
        "id": "7fc613f9ba9d1862",
        "type": "mqtt out",
        "z": "3efdd6c7ec92ccb2",
        "name": "",
        "topic": "dabit/feeds/msg",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8afb059a.9e82f8",
        "x": 740,
        "y": 100,
        "wires": []
    },
    {
        "id": "2d1fa502baaacf96",
        "type": "mqtt in",
        "z": "3efdd6c7ec92ccb2",
        "name": "",
        "topic": "dabit/feeds/msg_r",
        "qos": "0",
        "datatype": "auto",
        "broker": "8afb059a.9e82f8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 180,
        "wires": [
            [
                "1067e66a49aeb95b",
                "df1e52b1df052e40"
            ]
        ]
    },
    {
        "id": "1067e66a49aeb95b",
        "type": "ui_text_input",
        "z": "3efdd6c7ec92ccb2",
        "name": "",
        "label": "수신: ",
        "tooltip": "",
        "group": "370c76cdb65076e4",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 510,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "8dab2be5d965f51a",
        "type": "ui_dropdown",
        "z": "3efdd6c7ec92ccb2",
        "name": "",
        "label": "전광판 문구및 제어명령",
        "tooltip": "",
        "place": "Select option",
        "group": "370c76cdb65076e4",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "실시간문구 ![000/C1Hello /C2World!]",
                "value": "![000/C1Hello /C2World!]",
                "type": "str"
            },
            {
                "label": "실시간문구 ![000/Y0004/E0606/S1000/C7Text 123456789 Hello World!]",
                "value": "![000/Y0004/E0606/S1000/C7Text 123456789 Hello World!]",
                "type": "str"
            },
            {
                "label": "전원켜기 ![00211!]",
                "value": "![00211!]",
                "type": "str"
            },
            {
                "label": "전원끄기 ![00210!]",
                "value": "![00210!]",
                "type": "str"
            },
            {
                "label": "밝기설정 ![005099!]",
                "value": "![005099!]",
                "type": "str"
            },
            {
                "label": "밝기설정 ![005050!]",
                "value": "![005050!]",
                "type": "str"
            },
            {
                "label": "밝기설정 ![005010!]",
                "value": "![005010!]",
                "type": "str"
            },
            {
                "label": "메시지속성 ![0032/P0000/D9901/F0003/E0101/S2002/X0000/Y0000/B000/C3/G0/T0!]",
                "value": "![0032/P0000/D9901/F0003/E0101/S2002/X0000/Y0000/B000/C3/G0/T0!]",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "e59cce8271ad4328"
            ]
        ]
    },
    {
        "id": "df1e52b1df052e40",
        "type": "debug",
        "z": "3efdd6c7ec92ccb2",
        "name": "Debug Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 280,
        "wires": []
    },
    {
        "id": "1c98f7da0cb46ea5",
        "type": "mqtt in",
        "z": "2fa83399a0b11391",
        "name": "MQTT Input",
        "topic": "dabit/feeds/sch_r",
        "qos": "0",
        "datatype": "json",
        "broker": "mqttBroker",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 100,
        "wires": [
            [
                "c742022a58ee9fc3"
            ]
        ]
    },
    {
        "id": "c742022a58ee9fc3",
        "type": "function",
        "z": "2fa83399a0b11391",
        "name": "Store MAC Addresses",
        "func": "var devices = flow.get('devices') || [];\nvar newDevice = {\n    mac: msg.payload.mac,\n    data: msg.payload\n};\n\n// MAC 주소가 이미 저장되어 있는지 확인\nvar exists = devices.some(device => device.mac === newDevice.mac);\nif (!exists) {\n    devices.push(newDevice);\n    flow.set('devices', devices);\n}\n\n// MAC 주소 목록을 ui_template로 전달\nmsg.payload = devices.map(device => device.mac);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 100,
        "wires": [
            [
                "3450a41cc9293521"
            ]
        ]
    },
    {
        "id": "3450a41cc9293521",
        "type": "ui_template",
        "z": "2fa83399a0b11391",
        "group": "e434f41b1ee8faf4",
        "name": "MAC Address List",
        "order": 2,
        "width": "6",
        "height": "3",
        "format": "<div>\n    <h3>MAC Address List</h3>\n    <ul id=\"mac-list\">\n        <li ng-repeat=\"mac in msg.payload\" ng-click=\"send({payload: mac})\">\n            {{mac}}\n        </li>\n    </ul>\n</div>\n\n<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg) {\n                // 리스트가 갱신될 때마다 자동으로 표시됩니다.\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "59fba32b7c998fa7"
            ]
        ]
    },
    {
        "id": "e5c6ca03ef84971c",
        "type": "ui_form",
        "z": "2fa83399a0b11391",
        "name": "MQTT Input Form",
        "label": "송신: DB300 MQTT Settings",
        "group": "e434f41b1ee8faf4",
        "order": 3,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Name",
                "value": "name",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "MAC",
                "value": "mac",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Server",
                "value": "server",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Port",
                "value": "port",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "User",
                "value": "user",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Password",
                "value": "pass",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "LED (on/off)",
                "value": "led",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "name": "",
            "mac": "",
            "server": "",
            "port": "",
            "user": "",
            "pass": "",
            "led": ""
        },
        "payload": "",
        "submit": "Send",
        "cancel": "Cancel",
        "topic": "",
        "topicType": "str",
        "splitLayout": true,
        "className": "",
        "x": 630,
        "y": 180,
        "wires": [
            [
                "b691f0958442eb9a"
            ]
        ]
    },
    {
        "id": "b691f0958442eb9a",
        "type": "function",
        "z": "2fa83399a0b11391",
        "name": "Prepare MQTT Message",
        "func": "var name = msg.payload.name;\nvar mac = msg.payload.mac;\nvar server = msg.payload.server;\nvar port = msg.payload.port;\nvar user = msg.payload.user;\nvar pass = msg.payload.pass;\nvar led = msg.payload.led;\n\n// 데이터를 JSON 형식으로 구성\nvar data = {\n    name: name,\n    mac: mac,\n    server: server,\n    port: port,\n    user: user,\n    pass: pass,\n    led: led\n};\n\n// JSON 형식으로 변환\nmsg.payload = JSON.stringify(data);\n\n// 결과 메시지 반환\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 280,
        "wires": [
            [
                "c28964a740f36a7d"
            ]
        ]
    },
    {
        "id": "c28964a740f36a7d",
        "type": "mqtt out",
        "z": "2fa83399a0b11391",
        "name": "MQTT Publish",
        "topic": "dabit/feeds/set",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqttBroker",
        "x": 680,
        "y": 280,
        "wires": []
    },
    {
        "id": "668d496db3c254a8",
        "type": "ui_button",
        "z": "2fa83399a0b11391",
        "name": "Clear MAC List",
        "group": "e434f41b1ee8faf4",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Clear MAC Addresses",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 340,
        "wires": [
            [
                "b22ec398de6b291a"
            ]
        ]
    },
    {
        "id": "b22ec398de6b291a",
        "type": "function",
        "z": "2fa83399a0b11391",
        "name": "Clear MAC Addresses List",
        "func": "// flow에 저장된 devices 리스트 초기화\nflow.set('devices', []);\n\n// MAC 리스트를 비우기 위해 빈 배열 전송\nmsg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 260,
        "wires": [
            [
                "3450a41cc9293521"
            ]
        ]
    },
    {
        "id": "59fba32b7c998fa7",
        "type": "function",
        "z": "2fa83399a0b11391",
        "name": "Load Selected Device Data",
        "func": "var devices = flow.get('devices') || [];\nvar selectedMac = msg.payload;\n\nvar selectedDevice = devices.find(device => device.mac === selectedMac);\nif (selectedDevice) {\n    // 폼을 초기화하기 위해 reset 메시지 전송\n    node.send({ reset: true });\n\n    // 약간의 지연 후 새로운 데이터를 전송\n    setTimeout(function () {\n        node.send({ payload: selectedDevice.data });\n    }, 100); // 100ms 지연 (필요에 따라 조정 가능)\n} else {\n    node.send({ reset: true });\n}\n\nreturn null; // 이미 메시지를 전송했으므로 null 반환",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 180,
        "wires": [
            [
                "e5c6ca03ef84971c"
            ]
        ]
    },
    {
        "id": "4411d23e066e2b7c",
        "type": "ui_button",
        "z": "c57ee5e6df58f697",
        "name": "",
        "group": "e434f41b1ee8faf4",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "MQTT Search",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"name\":\"DB300\"}",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "0973178724cd5183"
            ]
        ]
    },
    {
        "id": "0973178724cd5183",
        "type": "mqtt out",
        "z": "c57ee5e6df58f697",
        "name": "MQTT Publish",
        "topic": "dabit/feeds/sch",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqttBroker",
        "x": 420,
        "y": 140,
        "wires": []
    },
    {
        "id": "8447a2ff4f8de101",
        "type": "ui_button",
        "z": "7db4cad2bb629dbe",
        "name": "",
        "group": "4fd1d76d70a6b2c0",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "MQTT Search",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"name\":\"DB300\"}",
        "payloadType": "json",
        "topic": "dabit/feeds/sch",
        "topicType": "str",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "8393d81ef0d59c7a"
            ]
        ]
    },
    {
        "id": "a1fc71c4270d7faa",
        "type": "serial out",
        "z": "7db4cad2bb629dbe",
        "name": "",
        "serial": "ba402f83e78daed1",
        "x": 610,
        "y": 140,
        "wires": []
    },
    {
        "id": "8393d81ef0d59c7a",
        "type": "function",
        "z": "7db4cad2bb629dbe",
        "name": "function 1",
        "func": "msg.payload = msg.topic + JSON.stringify(msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            [
                "a1fc71c4270d7faa"
            ]
        ]
    },
    {
        "id": "cd68ef24ef01523f",
        "type": "function",
        "z": "c69d424d21b653c5",
        "name": "Store MAC Addresses",
        "func": "var devices = flow.get('devices') || [];\nvar newDevice = {\n    mac: msg.payload.mac,\n    data: msg.payload\n};\n\n// MAC 주소가 이미 저장되어 있는지 확인\nvar exists = devices.some(device => device.mac === newDevice.mac);\nif (!exists) {\n    devices.push(newDevice);\n    flow.set('devices', devices);\n}\n\n// MAC 주소 목록을 ui_template로 전달\nmsg.payload = devices.map(device => device.mac);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 100,
        "wires": [
            [
                "4af9bfee291f0681"
            ]
        ]
    },
    {
        "id": "4af9bfee291f0681",
        "type": "ui_template",
        "z": "c69d424d21b653c5",
        "group": "4fd1d76d70a6b2c0",
        "name": "MAC Address List",
        "order": 2,
        "width": "6",
        "height": "3",
        "format": "<div>\n    <h3>MAC Address List</h3>\n    <ul id=\"mac-list\">\n        <li ng-repeat=\"mac in msg.payload\" ng-click=\"send({payload: mac, timestamp: Date.now()})\">\n            {{mac}}\n        </li>\n    </ul>\n</div>\n\n<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg) {\n                // 리스트가 갱신될 때마다 자동으로 표시됩니다.\n            }\n        });\n    })(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "0f2f5eb5c8758b54"
            ]
        ]
    },
    {
        "id": "8c20919270cc826b",
        "type": "ui_form",
        "z": "c69d424d21b653c5",
        "name": "MQTT Input Form",
        "label": "송신: DB300 MQTT Settings",
        "group": "4fd1d76d70a6b2c0",
        "order": 3,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Name",
                "value": "name",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "MAC",
                "value": "mac",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Server",
                "value": "server",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Port",
                "value": "port",
                "type": "number",
                "required": false,
                "rows": null
            },
            {
                "label": "User",
                "value": "user",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Password",
                "value": "pass",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "LED (on/off)",
                "value": "led",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "name": "",
            "mac": "",
            "server": "",
            "port": "",
            "user": "",
            "pass": "",
            "led": ""
        },
        "payload": "",
        "submit": "Send",
        "cancel": "Cancel",
        "topic": "dabit/feeds/set",
        "topicType": "str",
        "splitLayout": true,
        "className": "",
        "x": 630,
        "y": 180,
        "wires": [
            [
                "2f253610749c827d"
            ]
        ]
    },
    {
        "id": "2f253610749c827d",
        "type": "function",
        "z": "c69d424d21b653c5",
        "name": "Prepare MQTT Message",
        "func": "var name = msg.payload.name;\nvar mac = msg.payload.mac;\nvar server = msg.payload.server;\nvar port = msg.payload.port;\nvar user = msg.payload.user;\nvar pass = msg.payload.pass;\nvar led = msg.payload.led;\n\n// 데이터를 JSON 형식으로 구성\nvar data = {\n    name: name,\n    mac: mac,\n    server: server,\n    port: port,\n    user: user,\n    pass: pass,\n    led: led\n};\n\n// JSON 형식으로 변환\nmsg.payload = msg.topic + JSON.stringify(data);\n\n// 결과 메시지 반환\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 280,
        "wires": [
            [
                "f89c8d441b8f77fc",
                "18ac3e3f42ee21f6"
            ]
        ]
    },
    {
        "id": "f89c8d441b8f77fc",
        "type": "serial out",
        "z": "c69d424d21b653c5",
        "name": "",
        "serial": "ba402f83e78daed1",
        "x": 730,
        "y": 280,
        "wires": []
    },
    {
        "id": "0f2f5eb5c8758b54",
        "type": "function",
        "z": "c69d424d21b653c5",
        "name": "Load Selected Device Data",
        "func": "var devices = flow.get('devices') || [];\nvar selectedMac = msg.payload;\n\nvar selectedDevice = devices.find(device => device.mac === selectedMac);\nif (selectedDevice) {\n    // 폼을 초기화하기 위해 reset 메시지 전송\n    node.send({ reset: true });\n\n    // 약간의 지연 후 새로운 데이터를 전송\n    setTimeout(function () {\n        node.send({ payload: selectedDevice.data });\n    }, 100); // 100ms 지연 (필요에 따라 조정 가능)\n} else {\n    node.send({ reset: true });\n}\n\nreturn null; // 이미 메시지를 전송했으므로 null 반환\n\n",
        "outputs": 1,
        "timeout": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 180,
        "wires": [
            [
                "8c20919270cc826b"
            ]
        ]
    },
    {
        "id": "0a27bae221b6eff8",
        "type": "ui_button",
        "z": "c69d424d21b653c5",
        "name": "Clear MAC List",
        "group": "4fd1d76d70a6b2c0",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Clear MAC Addresses",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 340,
        "wires": [
            [
                "dd5162616d393959"
            ]
        ]
    },
    {
        "id": "dd5162616d393959",
        "type": "function",
        "z": "c69d424d21b653c5",
        "name": "Clear MAC Addresses List",
        "func": "// flow에 저장된 devices 리스트 초기화\nflow.set('devices', []);\n\n// MAC 리스트를 비우기 위해 빈 배열 전송\nmsg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 260,
        "wires": [
            [
                "4af9bfee291f0681"
            ]
        ]
    },
    {
        "id": "3a8ddffa282b962b",
        "type": "serial in",
        "z": "c69d424d21b653c5",
        "name": "",
        "serial": "ba402f83e78daed1",
        "x": 70,
        "y": 100,
        "wires": [
            [
                "c6b769a8a76a4bcc"
            ]
        ]
    },
    {
        "id": "c6b769a8a76a4bcc",
        "type": "function",
        "z": "c69d424d21b653c5",
        "name": "Parse Serial Input",
        "func": "// 입력된 메시지(payload)를 변수에 저장\nlet input = msg.payload;\n\n// 토픽과 페이로드를 나누기 위한 분리 기준인 첫 번째 \"{\"의 위치 찾기\nlet splitIndex = input.indexOf('{');\n\n// 토픽과 페이로드 분리\nif (splitIndex !== -1) {\n    // 토픽은 \"{\" 이전의 문자열\n    let topic = input.substring(0, splitIndex);\n    // 페이로드는 \"{\"와 그 이후의 문자열\n    let payload = input.substring(splitIndex);\n\n    // 토픽과 페이로드를 각각 설정\n    msg.topic = topic.trim();  // 공백 제거\n    msg.payload = JSON.parse(payload);  // JSON 형식으로 파싱\n}\n\n// 결과 반환\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 100,
        "wires": [
            [
                "cd68ef24ef01523f"
            ]
        ]
    },
    {
        "id": "18ac3e3f42ee21f6",
        "type": "debug",
        "z": "c69d424d21b653c5",
        "name": "Debug Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 360,
        "wires": []
    }
]
